// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  recipes   Recipe[]
  ratings   Rating[]
  bio       String?
  role      String   @default("user") // user, admin
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Recipe {
  id            Int          @id @default(autoincrement())
  title         String
  content       String?
  ingredients   Ingredient[]
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String
  ratings       Rating[]
  averageRating Float?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  quantity Float
  metric   Metric @relation(fields: [metricId], references: [id])
  metricId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model Metric {
  id          Int          @id @default(autoincrement())
  name        String
  ingredients Ingredient[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}
